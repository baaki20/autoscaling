AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Auto Scaling Lab:
  AWS CloudFormation template for the Auto Scaling Lab. It creates a
  VPC, public and private subnets, an Application Load Balancer, and an Auto
  Scaling Group with a scaling policy based on CPU utilization.
Parameters:
  VpcCiDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CiDR:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CiDR:
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CiDR:
    Type: String
    Default: 10.0.10.0/24
  PrivateSubnet2CiDR:
    Type: String
    Default: 10.0.11.0/24
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
 
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCiDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: asg-lab-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: asg-lab-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CiDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CiDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CiDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CiDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: nat-gateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-route-table

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NAT-GW-2

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-RT-2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows HTTP from the internet to ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: alb-sg

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: instances-sg

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: asg-lab-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application
      Tags:
        - Key: Name
          Value: asg-lab-alb

# Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: asg-lab-tg
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'

# Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # IAM Instance Profile
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: asg-lab-instance-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  # Launch Template for ASG
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: asg-lab-launch-template
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd

            # create cgi-bin for CPU stress endpoints
            mkdir -p /var/www/cgi-bin

            # start stress script
            cat > /var/www/cgi-bin/stress.sh << 'EOF'
            #!/bin/bash
            # Start two background CPU burners using yes
            nohup bash -c 'yes > /dev/null &' >/dev/null 2>&1
            nohup bash -c 'yes > /dev/null &' >/dev/null 2>&1
            echo -e "Content-type: text/html\n\n<html><body><h2>CPU stress started on this instance</h2></body></html>"
            EOF
            chmod +x /var/www/cgi-bin/stress.sh

            # stop stress script
            cat > /var/www/cgi-bin/stop-stress.sh << 'EOF'
            #!/bin/bash
            # Kill all yes processes
            sudo pkill -f "^yes"
            echo -e "Content-type: text/html\n\n<html><body><h2>CPU stress stopped on this instance</h2></body></html>"
            EOF
            chmod +x /var/www/cgi-bin/stop-stress.sh

            # build index page
            TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" -s)
            META_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
            META_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)

            cat > /var/www/html/index.html << EOF
            <!doctype html>
            <html>
            <head>
                <title>ASG Lab</title>
                <style>
                    /* General body styling for a clean look */
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                        background-color: #f4f7f9;
                        color: #333;
                        display: flex;
                        flex-direction: column;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                        margin: 0;
                        padding: 20px;
                        box-sizing: border-box;
                    }
            
                    /* Container to center and style the content box */
                    .container {
                        background-color: #fff;
                        padding: 40px;
                        border-radius: 10px;
                        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                        text-align: center;
                        width: 100%;
                        max-width: 600px;
                    }
            
                    /* Style the main heading */
                    h1 {
                        color: #2c3e50;
                        font-size: 2em;
                        margin-bottom: 20px;
                    }
            
                    /* Styling for the buttons */
                    button {
                        background-color: #3498db;
                        color: #fff;
                        border: none;
                        padding: 12px 25px;
                        margin: 10px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-size: 1em;
                        transition: background-color 0.3s ease, transform 0.1s ease;
                    }
            
                    /* Hover effect for buttons */
                    button:hover {
                        background-color: #2980b9;
                    }
            
                    /* Active/click effect for buttons */
                    button:active {
                        transform: scale(0.98);
                    }
            
                    /* Styling for the result area */
                    #result {
                        margin-top: 25px;
                        background-color: #ecf0f1;
                        border: 1px solid #bdc3c7;
                        border-radius: 5px;
                        padding: 15px;
                        white-space: pre-wrap;
                        text-align: left;
                        font-family: 'Courier New', Courier, monospace;
                        overflow-x: auto;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>Hello from $META_IP / $META_ID</h1>
                    <button id="stressBtn">Start CPU Stress</button>
                    <button id="stopBtn">Stop CPU Stress</button>
                    <div id="result"></div>
                </div>
                <script>
                    document.getElementById('stressBtn').addEventListener('click', function() {
                        fetch('/cgi-bin/stress.sh')
                            .then(r => r.text())
                            .then(t => { document.getElementById('result').innerHTML = '<pre>' + t + '</pre>'; })
                            .catch(e => { document.getElementById('result').innerText = 'Error: ' + e; });
                    });
                    document.getElementById('stopBtn').addEventListener('click', function() {
                        fetch('/cgi-bin/stop-stress.sh')
                            .then(r => r.text())
                            .then(t => { document.getElementById('result').innerHTML = '<pre>' + t + '</pre>'; })
                            .catch(e => { document.getElementById('result').innerText = 'Error: ' + e; });
                    });
                </script>
            </body>
            </html>
            EOF

            # enable CGI handling in httpd
            chown -R apache:apache /var/www/html /var/www/cgi-bin

            cat > /etc/httpd/conf.d/cgi.conf << 'EOF'
            ScriptAlias /cgi-bin/ "/var/www/cgi-bin/"
            <Directory "/var/www/cgi-bin">
                AllowOverride None
                Options +ExecCGI
                Require all granted
            </Directory>
            EOF

            systemctl enable httpd
            systemctl start httpd

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg-lab
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '4'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: asg-lab-instance
          PropagateAtLaunch: true

  # Scaling policy with target tracking
  CpuTargetTrackingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 30.0
        DisableScaleIn: false

Outputs:
  LoadBalancerDNS:
    Description: "Public url of the Application Load Balancer"
    Value: !GetAtt ALB.DNSName
    Export:
      Name: asg-lab-alb-dns
